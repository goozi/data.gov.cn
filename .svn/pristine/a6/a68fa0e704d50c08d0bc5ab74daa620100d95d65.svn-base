<PUBLIC:COMPONENT tagName="Menu" urn="kingtop" Version="1.0">
<PUBLIC:PROPERTY NAME="MenuStyleSheet" />
<PUBLIC:PROPERTY NAME="MenuDataSrc" />
<PUBLIC:PROPERTY NAME="MenuPosition" />
<PUBLIC:PROPERTY NAME="MenuFlyoutTime" />
<PUBLIC:PROPERTY NAME="MenuFilesDir" />
<PUBLIC:ATTACH event="ondocumentready" onevent="loadMenu()" />
<script language="Jscript">

var Menu = 
{
	xmlData : MenuDataSrc,
	MenuFilesDir : MenuFilesDir,
	MenuCases : new Array,
	MenuDivObjects : new Array,
	MenuPosition : MenuPosition,
	MenuFlyoutTime : parseInt(MenuFlyoutTime),

	init : 
		function(){
			Menu.createMenuGroup();
			
			var MenuBox = window.document.createElement("span");
			MenuBox.className = "MenuBox";
			window.document.body.appendChild(MenuBox);
			var menuTable = window.document.createElement("table");
			menuTable.className = "MenuBox";
			var menuBar;
			for(var i=0;i<Menu.MenuCases.length;i++){
				menuBar=Menu.MenuPosition.toLowerCase()=="top"?(!i)?menuTable.insertRow():menuBar:menuTable.insertRow();
				if(Menu.MenuPosition.toLowerCase()=="top")Menu.MenuCases[i].childNodes[0].innerHTML = Menu.MenuCases[i].childNodes[0].innerText;
				menuBar.insertCell().appendChild(Menu.MenuCases[i]);
				
			}			
			element.replaceNode(menuTable);			
			var caseObj = menuTable.all.tags("a");
			for(var i=0;i<caseObj.length;i++){
				caseObj[i].style.width = caseObj[i].parentNode.parentNode.clientWidth-2;
				if(caseObj[i].childNodes.length-1)caseObj[i].childNodes[1].align = "right";
			}
			for(var i=0;i<Menu.MenuDivObjects.length;i++){
				MenuBox.appendChild(Menu.MenuDivObjects[i]);

				var blockObj = Menu.MenuDivObjects[i];
				var blockRealWidth = blockObj.clientWidth - parseInt(blockObj.currentStyle.paddingLeft) - parseInt(blockObj.currentStyle.paddingRight);
				var itemObjs = blockObj.all.tags("a");
				for(var j=0;j<itemObjs.length;j++)
					itemObjs[j].style.width = blockRealWidth;
				var imgsObjs = blockObj.all.tags("img");
				for(var j=0;j<imgsObjs.length;j++)
					imgsObjs[j].align = "right";
			}
		},

	createMenuGroup :
		function(){
			var xmlDoc = new ActiveXObject("MSXML.DOMDocument");
			xmlDoc.async = false;
			xmlDoc.load(this.xmlData);
			var xmlNodes = xmlDoc.documentElement.childNodes;
			for(var i=0;i<xmlNodes.length;i++){
				var caseItemObj = this.createMenuByXMLNode(xmlNodes[i] , 0).itemObj();
				caseItemObj.setAttribute("itemType","root");
				this.MenuCases[this.MenuCases.length] = caseItemObj ;
			}
		},

	createMenuByXMLNode :
		function(menuXMLNode,deepth){
			var text = menuXMLNode.getAttribute("text");
			var href = menuXMLNode.getAttribute("href");
			var target = menuXMLNode.getAttribute("target");
			var childItemsBox = null;
			if(menuXMLNode.hasChildNodes()){
				var itemsBox = new MenuBox(deepth);
				for(var i=0;i<menuXMLNode.childNodes.length;i++){
					itemsBox.addItem( this.createMenuByXMLNode(menuXMLNode.childNodes[i] , deepth+1) );					
				}
				childItemsBox = itemsBox.boxObj();
				Menu.MenuDivObjects[Menu.MenuDivObjects.length] = childItemsBox;
			}
			return new MenuItem(text,href,target,childItemsBox);
		},

	hideBlock : 
		function(){
			var blockObj = this;
			this.clearHandle = window.setTimeout(
				function(){blockObj.runtimeStyle.display = "none";}
				,Menu.MenuFlyoutTime
			);
		},

	cancleHide : 
		function(){
			window.clearTimeout(this.clearHandle)
		}
	
};

function MenuItem(te,hr,ta,cb){
	this.text = te;
	this.href = hr;
	this.target = ta;
	this.childItemsBox = cb;
	this.itemObj = 
		function(){
			var obj = window.document.createElement("a");
			obj.innerHTML = this.text;
			obj.href = this.href;
			obj.target = this.target;
			obj.childItemsBox = this.childItemsBox;
			var childDiv = this.childItemsBox;
			if(childDiv != null){
				
				childDiv.setAttribute("parentItem",obj);
				
				var arrowObj = window.document.createElement("img");
				arrowObj.src = Menu.MenuFilesDir + "arrow.gif";
				arrowObj.onmouseover = ARROW_ONMOUSEOVER;
				arrowObj.onmouseout = ARROW_ONMOUSEOUT;
				obj.appendChild(arrowObj);
				
			}
			
			
			obj.onmouseout = ITEM_MOUSEOUT;
			obj.onmouseover = ITEM_MOUSEOVER;
			obj.onclick = ITEM_CLICK;
			obj.onfocus = ITEM_FOCUS;
			var tmpObj = window.document.createElement("nobr");
			tmpObj.appendChild(obj);
			return tmpObj;
		}
}


/*

  function MenuBox(deepth){
	this.deepth = deepth;
	this.items = [];
	this.addItem = 
		function(menuItem){
			this.items[this.items.length] = menuItem;
		}
	this.boxObj = 
		function(){
			var other=window.document.createElement("object");
			var obj = window.document.createElement("div");
			other.style.zIndex = this.deepth + 100;
			other.hide = Menu.hideBlock;			
			for(var i=0;i<this.items.length;i++){
				obj.appendChild( this.items[i].itemObj() );
			}
			other.style.width=100;
			other.style.height=200;
			other.type="text/x-scriptlet";
			other.data="about:<body>" + obj.innerHTML + "";
			return other;
		}
}

*/

function MenuBox(deepth){
	this.deepth = deepth;
	this.items = [];
	this.addItem = 
		function(menuItem){
			this.items[this.items.length] = menuItem;
		}
	this.boxObj = 
		function(){
			var obj = window.document.createElement("div");
			obj.style.zIndex = this.deepth + 100;
			obj.hide = Menu.hideBlock;			
			for(var i=0;i<this.items.length;i++){
				obj.appendChild( this.items[i].itemObj() );
			}
			return obj;
		}
}

/***************************  ITEM EVENT HANDLE *************************/

function ITEM_CLICK(){
	for(var i=0;i<Menu.MenuDivObjects.length;i++)
		Menu.MenuDivObjects[i].runtimeStyle.display = "none";
}
function ITEM_MOUSEOVER(){
	var _currentItem = this;
	var _currentDiv = null;
	while(_currentItem.parentNode.itemType != "root"){
		_currentDiv = _currentItem.parentNode.parentNode;
		_currentDiv.cancleHide = Menu.cancleHide;
		_currentDiv.cancleHide();
		_currentItem = _currentDiv.parentItem;
	}
	
	if(this.parentNode.parentNode.activeChildDiv){
		this.parentNode.parentNode.activeChildDiv.runtimeStyle.display = "none";
	}

	if( this.childItemsBox ){
		
		this.parentNode.parentNode.activeChildDiv = this.childItemsBox;
		var rootFlag = (Menu.MenuPosition.toLowerCase()=="left")?0:(this.parentNode.itemType == "root");
		var pianLeft = event.x - event.offsetX + window.document.body.scrollLeft + ( rootFlag ? -3 : this.offsetWidth - 7 ) ;
		var pianTop = event.y - event.offsetY + window.document.body.scrollTop + ( rootFlag ? this.offsetHeight -4 : -3 ) ;
		this.childItemsBox.runtimeStyle.left = (pianLeft + this.childItemsBox.offsetWidth - window.document.body.scrollLeft)<window.document.body.clientWidth?pianLeft:(pianLeft - this.offsetWidth - this.childItemsBox.offsetWidth + 12);
		this.childItemsBox.runtimeStyle.top  = (pianTop + this.childItemsBox.offsetHeight - window.document.body.scrollTop)<window.document.body.clientHeight?pianTop:(window.document.body.clientHeight + window.document.body.scrollTop - this.childItemsBox.offsetHeight - 5);
		this.childItemsBox.runtimeStyle.display = "block";		
		/*cal_hideElementAll(this.childItemsBox);
		cal_hideElementAll(this);
		var _currentItem = this;
		var _currentDiv = null;
		while(_currentItem.parentNode.itemType != "root")
		{
			_currentDiv = _currentItem.parentNode.parentNode;
			_currentItem = _currentDiv.parentItem;
			cal_hideElementAll(_currentDiv);
		}
		*/
		
	}
}

function ITEM_MOUSEOUT(){
	try{
		if(this.contains(event.toElement))
			return; 
		if(this.childItemsBox){
			if(this.childItemsBox.contains(event.toElement)){
				return;				
			}
			else{ 		
				this.childItemsBox.runtimeStyle.display = "none";
				//cal_ShowElement();				
			}
		}

		if(this.parentNode.parentNode.contains(event.toElement) && this.parentNode.parentNode!=event.toElement)
		{
			return; 
		}

		if(this.parentNode.parentNode.parentItem.parentNode.parentNode.contains(event.toElement)){
			this.parentNode.parentNode.runtimeStyle.display = "none"; 			
					
		}
		else{ 
			var _currentItem = this;
			var _currentDiv = null;
			while(_currentItem.parentNode.itemType != "root"){
				_currentDiv = _currentItem.parentNode.parentNode;
				_currentDiv.hide();
				_currentItem = _currentDiv.parentItem; 				
			}			
			
		}
		
	}catch(e){};
}

function ITEM_FOCUS(){
	this.blur();
}
/***************************  ARROW IMAGE EVENT HANDLE *************************/

function ARROW_ONMOUSEOVER(){
	event.cancelBubble = true;
	event.returnValue = false;
	return false;
}
function ARROW_ONMOUSEOUT(){
	event.cancelBubble = true;
	event.returnValue = false;
	return false;
}
/***************************  BLOCK(DIV) IMAGE EVENT HANDLE *************************/

function loadMenu(){
	window.document.createStyleSheet(Menu.MenuFilesDir + MenuStyleSheet);
	window.setTimeout(Menu.init,1);
}

/****************************隐藏SELECT表单****************************************/
var HideElementTemp = new Array();
//点击菜单时，调用此的函数,菜单对象
function cal_hideElementAll(obj){ 
        //cal_HideElement("IMG",obj);
        cal_HideElement("SELECT",obj);
        //cal_HideElement("OBJECT",obj);
        //cal_HideElement("IFRAME",obj);
}
function cal_HideElement(strElementTagName,obj)
{
	try{
		var showDivElement = obj;
		var calendarDiv = obj;
		var intDivLeft = cal_GetOffsetLeft(showDivElement);	
		var intDivTop = cal_GetOffsetTop(showDivElement);
		for(i=0;i<window.document.all.tags(strElementTagName).length;i++)
		{
			var objTemp = window.document.all.tags(strElementTagName)[i];
			if(!objTemp||!objTemp.offsetParent)	  continue;
			var intObjLeft=cal_GetOffsetLeft(objTemp);
			var intObjTop=cal_GetOffsetTop(objTemp);
			if(((intObjLeft+objTemp.clientWidth)>intDivLeft)&&(intObjLeft<intDivLeft+calendarDiv.offsetWidth)&&(intObjTop+objTemp.clientHeight>intDivTop)&&(intObjTop<intDivTop+calendarDiv.offsetHeight))
			{     
				 HideElementTemp[HideElementTemp.length]=objTemp
				 objTemp.style.visibility="hidden";	 
			}
		}
	}
	catch(e)
	{
		alert(e.message)
	}
}

function cal_ShowElement()
{
    var i;
    for(i=0;i<HideElementTemp.length; i++)
	{
		var objTemp = HideElementTemp[i]
		if(!objTemp||!objTemp.offsetParent)
		continue;
		objTemp.style.visibility=''
    }
    HideElementTemp=new Array();
}

function cal_GetOffsetLeft(src){
    var set=0;
    if(src && src.name!="divMain"){
        if (src.offsetParent){
           set+=src.offsetLeft+cal_GetOffsetLeft(src.offsetParent);
 }
 if(src.tagName.toUpperCase()!="BODY"){
     var x=parseInt(src.scrollLeft,10);
     if(!isNaN(x))
            set-=x;
 }
    }
    return set;
}

function cal_GetOffsetTop(src){
    var set=0;
    if(src && src.name!="divMain"){
        if (src.offsetParent){
            set+=src.offsetTop+cal_GetOffsetTop(src.offsetParent);
   }
 if(src.tagName.toUpperCase()!="BODY"){
     var y=parseInt(src.scrollTop,10);
     if(!isNaN(y))
  set-=y;
 }
    }
    return set;
}




</script>
</PUBLIC:COMPONENT>
